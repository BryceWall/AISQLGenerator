{
  "strategy": "zero_shot",
  "prompt_prefix": "\n\n    CREATE TABLE IF NOT EXISTS Customer (\n        customer_id INTEGER PRIMARY KEY,\n        first_name VARCHAR(50) NOT NULL,\n        last_name VARCHAR(50) NOT NULL,\n        email VARCHAR(100),\n        phone VARCHAR(20),\n        purchase_power NUMERIC(7, 2) DEFAULT 10000.00\n    );\n    \n    CREATE TABLE IF NOT EXISTS Vehicle (\n        vehicle_id INTEGER PRIMARY KEY,\n        year INTEGER NOT NULL,\n        make VARCHAR(20) NOT NULL,\n        model VARCHAR(20) NOT NULL,\n        miles INTEGER NOT NULL,\n        price NUMERIC(7, 2) NOT NULL,\n        vin VARCHAR(20) UNIQUE NOT NULL\n    );\n\n    CREATE TABLE IF NOT EXISTS Inventory (\n        inventory_id INTEGER PRIMARY KEY,\n        status VARCHAR(20) NOT NULL,\n        date_added DATE NOT NULL,\n        FOREIGN KEY (inventory_id) REFERENCES Vehicle(vehicle_id) ON DELETE CASCADE\n    );\n\n   Give me a postgre select statement that answers the question. Only respond with postgre syntax. If there is an error do not expalin it!",
  "questionResults": [
    {
      "question": "Which vehicles are not sold?\n",
      "sql": "\nSELECT V.*\nFROM Vehicle V\nLEFT JOIN Inventory I ON V.vehicle_id = I.inventory_id\nWHERE I.status IS NULL;\n",
      "queryRawResponse": "[]",
      "friendlyResponse": "It looks like there are currently no unsold vehicles.",
      "error": "None"
    },
    {
      "question": "List the vehicles that were made after 2018?\n",
      "sql": "\nSELECT * FROM Vehicle WHERE year > 2018;\n",
      "queryRawResponse": "[(2, 2020, 'Honda', 'Civic', 30000, Decimal('20999.50'), '2HGCM82633A123457'), (3, 2019, 'Ford', 'Mustang', 22000, Decimal('25999.75'), '1FTFW1ET9DF123456'), (4, 2021, 'Chevrolet', 'Malibu', 15000, Decimal('23499.95'), '3GNDA13D76S123456'), (7, 2022, 'Kia', 'Sorento', 10000, Decimal('28999.95'), 'KNDPCCA28A1234567'), (9, 2019, 'Audi', 'A4', 25000, Decimal('27999.90'), 'WAUZFAFL7DN123456'), (10, 2021, 'Mercedes-Benz', 'C-Class', 18000, Decimal('36999.99'), 'WDDGF81X99F123456'), (12, 2020, 'Jeep', 'Wrangler', 31000, Decimal('31999.75'), '1J4FA49S5YP123456'), (14, 2019, 'Volkswagen', 'Passat', 28000, Decimal('23999.95'), '1VWBT7A31EC123456'), (18, 2021, 'Tesla', 'Model 3', 12000, Decimal('44999.99'), '5YJ3E1EA3KF123456'), (19, 2019, 'Ford', 'F-150', 27000, Decimal('28999.90'), '1FTEX1E53LFC123456'), (20, 2022, 'Honda', 'Accord', 9000, Decimal('32999.99'), '1HGCV1F3XMA123456'), (21, 2024, 'Chevy', 'Corvette', 1000, Decimal('72000.99'), '2T3DFREV3CW123456')]",
      "friendlyResponse": "Here are the vehicles made after 2018:\n\n1. **2021 Chevrolet Malibu** - $23,499.95\n2. **2021 Mercedes-Benz C-Class** - $36,999.99\n3. **2021 Tesla Model 3** - $44,999.99\n4. **2022 Kia Sorento** - $28,999.95\n5. **2022 Honda Accord** - $32,999.99\n6. **2024 Chevy Corvette** - $72,000.99",
      "error": "None"
    },
    {
      "question": "Which vehicles can the customer Sophia Martinez buy with her purchasing power?\n",
      "sql": "\nSELECT V.*\nFROM Vehicle V\nJOIN Customer C ON C.purchase_power >= V.price\nWHERE C.first_name = 'Sophia' AND C.last_name = 'Martinez';\n",
      "queryRawResponse": "[(1, 2018, 'Toyota', 'Camry', 45000, Decimal('18999.99'), '1HGCM82633A123456'), (2, 2020, 'Honda', 'Civic', 30000, Decimal('20999.50'), '2HGCM82633A123457'), (3, 2019, 'Ford', 'Mustang', 22000, Decimal('25999.75'), '1FTFW1ET9DF123456'), (4, 2021, 'Chevrolet', 'Malibu', 15000, Decimal('23499.95'), '3GNDA13D76S123456'), (5, 2017, 'Nissan', 'Altima', 55000, Decimal('17999.99'), '1N4AL3AP9DC123456'), (6, 2016, 'Hyundai', 'Elantra', 62000, Decimal('14999.99'), '5NPEB4AC5CH123456'), (7, 2022, 'Kia', 'Sorento', 10000, Decimal('28999.95'), 'KNDPCCA28A1234567'), (8, 2015, 'BMW', '3 Series', 72000, Decimal('25999.00'), 'WBA3B1C53FP123456'), (9, 2019, 'Audi', 'A4', 25000, Decimal('27999.90'), 'WAUZFAFL7DN123456'), (10, 2021, 'Mercedes-Benz', 'C-Class', 18000, Decimal('36999.99'), 'WDDGF81X99F123456'), (11, 2018, 'Subaru', 'Outback', 46000, Decimal('21999.50'), '4S4BRBCC5E1234567'), (12, 2020, 'Jeep', 'Wrangler', 31000, Decimal('31999.75'), '1J4FA49S5YP123456'), (13, 2017, 'Mazda', 'CX-5', 52000, Decimal('18999.50'), 'JM3KE4D73G0123456'), (14, 2019, 'Volkswagen', 'Passat', 28000, Decimal('23999.95'), '1VWBT7A31EC123456'), (15, 2016, 'Dodge', 'Charger', 65000, Decimal('16999.95'), '2C3CDXBG5GH123456'), (16, 2018, 'Lexus', 'RX 350', 35000, Decimal('33999.50'), '2T2BZMCA1GC123456'), (17, 2015, 'Chevrolet', 'Equinox', 75000, Decimal('15999.75'), '2GNALBEK9C1234567'), (18, 2021, 'Tesla', 'Model 3', 12000, Decimal('44999.99'), '5YJ3E1EA3KF123456'), (19, 2019, 'Ford', 'F-150', 27000, Decimal('28999.90'), '1FTEX1E53LFC123456'), (20, 2022, 'Honda', 'Accord', 9000, Decimal('32999.99'), '1HGCV1F3XMA123456')]",
      "friendlyResponse": "Sure! Here are the vehicles Sophia Martinez can buy with her purchasing power:\n\n1. 2018 Toyota Camry - $18,999.99\n2. 2020 Honda Civic - $20,999.50\n3. 2019 Ford Mustang - $25,999.75\n4. 2021 Chevrolet Malibu - $23,499.95\n5. 2017 Nissan Altima - $17,999.99\n6. 2016 Hyundai Elantra - $14,999.99\n7. 2022 Kia Sorento - $28,999.95\n8. 2015 BMW 3 Series - $25,999.00\n9. 2019 Audi A4 - $27,999.90\n10. 2021 Mercedes-Benz C-Class - $36,999.99\n11. 2018 Subaru Outback - $21,999.50\n12. 2020 Jeep Wrangler - $31,999.75\n13. 2017 Mazda CX-5 - $18,999.50\n14. 2019 Volkswagen Passat - $23,999.95\n15. 2016 Dodge Charger - $16,999.95\n16. 2018 Lexus RX 350 - $33,999.50\n17. 2015 Chevrolet Equinox - $15,999.75\n18. 2021 Tesla Model 3 - $44,999.99\n19. 2019 Ford F-150 - $28,999.90\n20. 2022 Honda Accord - $32,999.99\n\nLet me know if you need more information!",
      "error": "None"
    },
    {
      "question": "Which vehicle has the highest price in the inventory?\n",
      "sql": "\nSELECT V.*\nFROM Vehicle V\nJOIN Inventory I ON V.vehicle_id = I.inventory_id\nORDER BY V.price DESC\nLIMIT 1;\n",
      "queryRawResponse": "[(21, 2024, 'Chevy', 'Corvette', 1000, Decimal('72000.99'), '2T3DFREV3CW123456')]",
      "friendlyResponse": "The vehicle with the highest price in the inventory is a 2024 Chevy Corvette, priced at $72,000.99.",
      "error": "None"
    },
    {
      "question": "Which customers can purchase a Tesla Model 3?\n",
      "sql": "\nSELECT c.first_name, c.last_name, c.email, c.purchase_power\nFROM Customer c\nJOIN Vehicle v ON v.price <= c.purchase_power\nWHERE v.make = 'Tesla' AND v.model = 'Model 3';\n",
      "queryRawResponse": "[('Jane', 'Smith', 'jane.smith@example.com', Decimal('45000.00')), ('Michael', 'Johnson', 'michael.johnson@example.com', Decimal('60000.00')), ('Sophia', 'Martinez', 'sophia.martinez@example.com', Decimal('54000.00')), ('David', 'Hernandez', 'david.hernandez@example.com', Decimal('99000.00')), ('Olivia', 'Lopez', 'olivia.lopez@example.com', Decimal('63000.00')), ('Isabella', 'Taylor', 'isabella.taylor@example.com', Decimal('85000.00'))]",
      "friendlyResponse": "The customers who can purchase a Tesla Model 3 are:\n\n1. Jane Smith - jane.smith@example.com\n2. Michael Johnson - michael.johnson@example.com\n3. Sophia Martinez - sophia.martinez@example.com\n4. David Hernandez - david.hernandez@example.com\n5. Olivia Lopez - olivia.lopez@example.com\n6. Isabella Taylor - isabella.taylor@example.com",
      "error": "None"
    }
  ]
}